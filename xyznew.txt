xyz
/* eslint-disable jsx-a11y/anchor-is-valid, react/no-array-index-key */
class NavigationLogoHeader extends Component {
  constructor(props) {
    super(props);

    let selectedCustCodeList = [];
    if(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' && [''].includes(props.auth.userInfo.selectedCustCode)) {
      selectedCustCodeList = [];
    } else if(![undefined, null, ''].includes(props.auth.userInfo.selectedCustCode)) {
      selectedCustCodeList = props.auth.userInfo.selectedCustCode.split('$$').map((x) => { return { value: x, label: x }; });
    } else if(props.auth.userInfo.type === 'CUSTOMER_CODE' || (this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' && this.props.auth.userInfo.role === 'Customer' && props.auth.userInfo.type === 'PAN')) {
      selectedCustCodeList = props.auth.userInfo.custCodeAccess.split('$$').map((x) => { return { value: x, label: x }; });
    }

    this.state = {
      // eslint-disable-next-line react/no-unused-state
      errorMessage: '',
      percentage: 0,
      userEmail: 'mailto: compass.support@tatasteel.com',
      showUserOptions: props.showUserOptions, //eslint-disable-line react/prop-types
      showSMOptions:
        props.auth.userInfo === undefined
          ? ''
          : props.auth.userInfo.role === 'SM', //eslint-disable-line react/prop-types
      userOptions: headerData.userOptions,
      level2Options:
        this.props.auth.userInfo.level2Access === undefined
          ? ''
          : this.props.auth.userInfo.level2Access.split('$$'), //eslint-disable-line react/prop-types
      // eslint-disable-next-line react/no-unused-state
      panOptions:
        this.props.auth.userInfo.type === 'PAN'
          ? this.props.auth.userInfo.code
          : '', //eslint-disable-line
      // eslint-disable-next-line react/no-unused-state
      selectedLevel2Mode: '',
      isHeaderFilterOpen:
        props.auth.userInfo === undefined
          ? false
          : props.auth.userInfo.role === 'SM' && !props.auth.isEmerge, //eslint-disable-line react/prop-types
      dropDownDefaultValue: {
        label:
          this.props.auth.userInfo.dropdownName +
          ' - ' +
          this.props.auth.userInfo.code, //eslint-disable-line react/prop-types
        value:
          this.props.auth.userInfo.dropdownName +
          ' - ' +
          this.props.auth.userInfo.code, //eslint-disable-line react/prop-types
      },
      custCodeOptions:
        this.props.auth.userInfo.custCodeAccess === undefined ||
          this.props.auth.userInfo.custCodeAccess === null
          ? ''
          : this.props.auth.userInfo.custCodeAccess.split('$$'), //eslint-disable-line react/prop-types
      selectedCustCodeMode: selectedCustCodeList,
      custCodeLoading: false,
      showUserDropDown: false,
      openNotify: false,
      autoAncillaryCodeLoading: false,
      autoAncillaryCodeArray: [],
      autoJcapcplAncillaryCodeArray: [],
      selectedAutoAncillaryCodes: [undefined, null, ''].includes(props.auth.userInfo.selectedAutoAncillaryCodes)
        ? [] : props.auth.userInfo.selectedAutoAncillaryCodes.split('$$').map((e) => {
          return { value: e, label: e };
        }),
      selectedAutoJcapcplAncillaryCodes: [undefined, null, ''].includes(props.auth.userInfo.selectedAutoJcapcplAncillaryCodes)
        ? [] : props.auth.userInfo.selectedAutoJcapcplAncillaryCodes.split('$$').map((e) => {
          return { value: e, label: e };
        }),
      selectedCC: selectedCustCodeList,
      selectedCustVal: selectedCustCodeList
    };

    this.selectNavOption = this.selectNavOption.bind(this);
    this.logout = this.logout.bind(this);
    this.getSMIDs = this.getSMIDs.bind(this);
    this.getCustCode = this.getCustCode.bind(this);
    this.changeCode = this.changeCode.bind(this);
    this.updateCustCode = this.updateCustCode.bind(this);
    this.updateLevel2 = this.updateLevel2.bind(this);
    this.handleFilterClick1 = this.handleFilterClick1.bind(this);
    this.handleLoading = this.handleLoading.bind(this);
    this.getAutoAncillaryCodes = this.getAutoAncillaryCodes.bind(this);
    this.getAutoJcapcplAncillaryCodes = this.getAutoJcapcplAncillaryCodes.bind(this);
    this.updateAutoAncillaryCode = this.updateAutoAncillaryCode.bind(this);
    this.updateAutoJcapcplAncillaryCode = this.updateAutoJcapcplAncillaryCode.bind(this);
  }
  componentDidMount() {
    const user = this.props.auth.userInfo;
    let { isHeaderFilterOpen } = this.state;
    if(user.headerFilterSelectedSM === 'selected') {
      isHeaderFilterOpen = false;
    }

    this.setState({
      isHeaderFilterOpen,
    });
    this.props.setAuthenticatedUser({
      userInfo: user,
      token: this.props.auth.token,
      isEmerge: this.props.auth.isEmerge,
      emergeToken: this.props.auth.emergeToken, //eslint-disable-line
    });
    user.selectedLevel2 =
      user.selectedLevel2 === undefined
        ? this.props.auth.userInfo.level2Access
        : user.selectedLevel2; //eslint-disable-line react/prop-types
    user.selectedCustCode =
      user.selectedCustCode === undefined && user.type !== 'PAN'
        ? this.props.auth.userInfo.custCodeAccess
        : user.selectedCustCode; //eslint-disable-line react/prop-types
    if(user.type === 'PAN') {
      //eslint-disable-line react/prop-types
      this.getCustCode();
    } else if(user.type === 'CUSTOMER_CODE') {
      this.getCustCode(true);
      if(this.state.custCodeOptions.length > 0) {
        const custCodeArray = [];
        const uniqueCheckArray = [];
        for (let i = 0; i < this.state.custCodeOptions.length; i = i + 1) {
          if(!uniqueCheckArray.includes(this.state.custCodeOptions[i])) {
            custCodeArray.push({
              value: this.state.custCodeOptions[i],
              label: this.state.custCodeOptions[i],
            });
            uniqueCheckArray.push(this.state.custCodeOptions[i]);
          }
        }
        this.setState({ custCodeOptions: custCodeArray });
      }
    }
    const level2Options = this.getLevel2Options(this.state.level2Options);
    this.setState({ level2Options });
    if(this.props.auth.userInfo.role === 'Customer' &&
      this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' &&
      this.props.auth.userInfo.autoAncillaryCode !== null) {
      this.handleLoading();
      this.setState({ autoAncillaryCodeLoading: true });
      this.getAutoAncillaryCodes();
    }
    if(this.props.auth.userInfo.role === 'Customer' &&
      this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' &&
      this.props.auth.userInfo.autoJcapcplAncillaryCode !== null) {
      this.handleLoading();
      this.setState({ autoAncillaryCodeLoading: true });
      this.getAutoJcapcplAncillaryCodes();
    }
    if(this.props.auth.userInfo.role === 'Customer' &&
      this.props.auth.userInfo.buisnessType === 'IsIPPFPUser' &&
      this.props.auth.userInfo.ippFpAncillaryCode !== null) {
      this.handleLoading();
      this.setState({ autoAncillaryCodeLoading: true });
      this.getAutoAncillaryCodes();
    }
  }

  componentWillReceiveProps(nextProps) {
    this.setState({
      showUserOptions: nextProps.showUserOptions,
      numberCount: nextProps.auth.userInfo.tabledataLength, //eslint-disable-line
      tableData: this.props.auth.userInfo.tabledata, //eslint-disable-line
    });
  }

  getAutoAncillaryCodes() {
    const url = '/AutoAncil/GetCUstomerMapping';
    const postBody = {
      employeeEmail: this.props.auth.userInfo.buisnessType === 'IsIPPFPUser' ? this.props.auth.userInfo.ippFpAncillaryCode : this.props.auth.userInfo.autoAncillaryCode
    };
    SCVWebAPI.post(url, null, null, postBody)
      .then((response) => {
        const autoAncillaryCodeDropDownSet = new Set();
        autoAncillaryCodeDropDownSet.add({
          value: 'All',
          label: 'All'
        });
        response.forEach((e) => {
          autoAncillaryCodeDropDownSet.add({
            value: e.CustomerCode,
            label: e.Name
          });
        });
        this.setState({
          autoAncillaryCodeArray: Array.from(autoAncillaryCodeDropDownSet),
          autoAncillaryCodeLoading: false
        });
        /* if([undefined, null, ''].includes(this.props.auth.userInfo.selectedAutoAncillaryCodes)) {
          const selectedAutoAncillaryCodes = Array.from(autoAncillaryCodeDropDownSet);
          this.setState({ selectedAutoAncillaryCodes });
          const { auth } = this.props;
          auth.userInfo.selectedAutoAncillaryCodes = this.setDelimeterValue(selectedAutoAncillaryCodes);
          this.props.setAuthenticatedUser(auth);
        } */
      })
      .catch(() => {
        this.setState({ autoAncillaryCodeLoading: false });
      });
  }

  getAutoJcapcplAncillaryCodes() {
    const url = '/AutoAncil/GetCUstomerMapping';
    const postBody = {
      employeeEmail: this.props.auth.userInfo.autoJcapcplAncillaryCode,
      JCAP: 'Y'
    };
    SCVWebAPI.post(url, null, null, postBody)
      .then((response) => {
        const autoJcapcplAncillaryCodeDropDownSet = new Set();
        autoJcapcplAncillaryCodeDropDownSet.add({
          value: 'All',
          label: 'All'
        });
        response.forEach((e) => {
          autoJcapcplAncillaryCodeDropDownSet.add({
            value: e.CustomerCode,
            label: e.Name
          });
        });
        this.setState({
          autoJcapcplAncillaryCodeArray: Array.from(autoJcapcplAncillaryCodeDropDownSet),
          autoAncillaryCodeLoading: false
        });
      })
      .catch(() => {
        this.setState({ autoAncillaryCodeLoading: false });
      });
  }

  getCustCode(custCodeFlag = false) {
    this.handleLoading();
    this.setState({ custCodeLoading: true });
    const { selectedCustCodeMode } = this.state;
    const ccOptions = [];
    if(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' && this.props.auth.userInfo.role === 'Customer') {
      ccOptions.push({
        value: 'All',
        label: 'All',
      });
    }
    const url = '/BillTo/GetBillTo';
    const postBody = {
      PAN: custCodeFlag ? '' : this.props.auth.userInfo.code,
      custID: custCodeFlag ? this.props.auth.userInfo.custCodeAccess : '',
    };
    //Code ends for setting PAN/Customer Code - JS
    SCVWebAPI.post(url, null, null, postBody)
      .then((response) => {
        const uniqueCheckArray = [];
        for (let i = 0; i < response.length; i = i + 1) {
          if(!uniqueCheckArray.includes(response[i].CustCode)) {
            ccOptions.push({
              value: response[i].CustCode,
              label: `${response[i].CustCode} - ${response[i].Name} - ${response[i].City}`,
            });
            const idx = findIndex(selectedCustCodeMode, (x) => {
              return x.value === response[i].CustCode;
            });
            if(idx !== -1) selectedCustCodeMode[idx].label = `${response[i].CustCode} - ${response[i].Name} - ${response[i].City}`;
            uniqueCheckArray.push(response[i].CustCode);
          }
        }
        this.setState({ custCodeOptions: ccOptions, custCodeLoading: false, selectedCustCodeMode });
        const { auth } = this.props;
        if(auth.userInfo.role === 'SM') {
          auth.userInfo.custCodeAccess = uniqueCheckArray.join('$$');
          this.props.setAuthenticatedUser(auth);
        }
      })
      .catch(() => {
        this.setState({ custCodeLoading: false });
      });
  }

  getLevel2Options(optionString) {
    const selectedLevel = this.props.auth.userInfo.selectedLevel2.split('$$');
    const level2Array = [];
    for (let i = 0; i < optionString.length; i = i + 1) {
      level2Array.push({
        value: optionString[i],
        label: optionString[i],
        checked: selectedLevel.includes(optionString[i])
      });
    }
    return level2Array;
  }

  getSMIDs() {
    if(!this.props.auth.isEmerge) {
      const id = [];
      for (let i = 0; i < this.props.auth.userInfo.smId.length; i = i + 1) {
        //eslint-disable-line react/prop-types
        id.push(this.props.auth.userInfo.smId[i].Name +
          ' - ' +
          this.props.auth.userInfo.smId[i].PAN); //eslint-disable-line react/prop-types
      }
      id.sort();
      const dropOptions = [];
      for (let i = 0; i < id.length; i = i + 1) {
        dropOptions.push({ value: id[i], label: id[i] });
      }
      return dropOptions;
    }
    return this.props.auth.userInfo.smId;
  }
  // eslint-disable-next-line react/sort-comp
  handleEventChangeotification(stateName, event) {
    //eslint-disable-line
    this.setState({ [stateName]: event });
  }

  changeCode(selectedValue) {
    const user = this.props.auth.userInfo;
    let customerInfo = '';
    if(!this.props.auth.isEmerge) {
      //eslint-disable-line
      for (let i = 0; i < user.smId.length; i = i + 1) {
        if(
          user.smId[i].PAN ===
          selectedValue.value.split(' - ')[
            selectedValue.value.split(' - ').length - 1
          ]
        ) {
          user.type = 'PAN';
          user.code = user.smId[i].PAN;
          user.dropdownName = user.smId[i].Name;
          this.getCustCode();
          break;
        }
      }
    } else {
      user.type = 'CUSTOMER_CODE';
      user.code = selectedValue.value.split(' - ')[
        selectedValue.value.split(' - ').length - 1
      ];
      user.custCodeAccess = selectedValue.value.split(' - ')[
        selectedValue.value.split(' - ').length - 1
      ];
      user.selectedCustCode = selectedValue.value.split(' - ')[
        selectedValue.value.split(' - ').length - 1
      ];
      user.dropdownName = selectedValue.value.split(' - ')[0] //eslint-disable-line
    }
    let dropdownName = '';
    if(user.dropdownName === 'DAGA TRADING CO. PVT LTD') {
      dropdownName = 'Daga Trading';
    }
    SCVWebAPI.dbPost(
      '/api/getCustomerId',
      {},
      {},
      {
        name: dropdownName /* this.props.auth.userInfo.name */, //eslint-disable-line
      },
    ).then((response) => {
      customerInfo = response.recordset[0].id;
      this.state.customerInfo = customerInfo;
    });
    this.setState({ dropDownDefaultValue: selectedValue });
  }
  selectNavOption() {
    const { navOptions, navOptions1 } = headerData;
    const { buisnessType, role } = this.props.auth.userInfo;
    let selectedOption = 0;
    if(role === 'Internal') {
      selectedOption = findIndex(navOptions1, (x) => { return x.id === 'usermanagement'; });
    } else if(buisnessType === 'IsAutomotiveUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'autoDashboard'; });
    } else if(buisnessType === 'IsIPPFPUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'ippfpDashboard'; });
    } else if(buisnessType === 'IsTSGUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'tsgDashboard'; });
    } else if(buisnessType === 'IsTCILUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'tcilDashboard'; });
    } else if(buisnessType === 'IsPostSupplyServices') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'postSupplyServices'; });
    } else if(buisnessType === 'IsExportUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'exportorder'; });
    } else if(buisnessType === 'IsTubesUser') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'tubeDashboard'; });
    } else if(buisnessType === 'IsLongTermPO') {
      selectedOption = findIndex(navOptions, (x) => { return x.id === 'poBasedPlanning'; });
    }

    this.props.updateAppContent(); //eslint-disable-line react/prop-types
    this.props.updateNav(selectedOption); //eslint-disable-line react/prop-types
  }

  getHomeRoute(userInfo) {
    if(userInfo.role === undefined || userInfo.role === null) {
      return '/';
    }
    let route = '/scv';
    if(userInfo.role === 'Internal') route = '/user-management';
    else if(userInfo.buisnessType === 'IsPostSupplyServices') route = '/scv/invoicetcrepository';
    else if(userInfo.buisnessType === 'IsExportUser') route = '/scv/exportorder';
    else if(userInfo.buisnessType === 'IsTubesUser') route = '/scv/tubesenquiry';
    else if(userInfo.buisnessType === 'IsLongTermPO') route = '/scv/pobasedplanning';
    else if(userInfo.buisnessType === 'Transport') route = '/scv/eproc';
    return route;
  }
  setDelimeterValue(filterVal) {
    let data = '';
    for (let i = 0; i < filterVal.length; i = i + 1) {
      data += filterVal[i].value + '$$';
    }
    data = data.substring(0, data.length - 2);
    return data;
  }
  setLevel2DelimeterValue(filterVal) {
    let data = filterVal + '$$';
    data += data;
    return data;
  }
  updateAutoAncillaryCode(selectedAutoAncillaryCodeList) {
    const { auth } = this.props;
    let selectedAutoAncillaryCodes = selectedAutoAncillaryCodeList;
    if(selectedAutoAncillaryCodeList.map((x) => { return x.value; }).includes('All')) {
      selectedAutoAncillaryCodes = this.state.autoAncillaryCodeArray.slice(1); // Array.from(autoAncillaryCodeDropDownSet);
    }
    this.setState({ selectedAutoAncillaryCodes });
    auth.userInfo.selectedAutoAncillaryCodes = this.setDelimeterValue(selectedAutoAncillaryCodes);
    this.props.setAuthenticatedUser(auth);
  }
  updateAutoJcapcplAncillaryCode(selectedAutoAncillaryCodeList) {
    const { auth } = this.props;
    let selectedAutoJcapcplAncillaryCodes = selectedAutoAncillaryCodeList;
    if(selectedAutoAncillaryCodeList.map((x) => { return x.value; }).includes('All')) {
      selectedAutoJcapcplAncillaryCodes = this.state.autoJcapcplAncillaryCodeArray.slice(1); // Array.from(autoAncillaryCodeDropDownSet);
    }
    this.setState({ selectedAutoJcapcplAncillaryCodes });
    auth.userInfo.selectedAutoJcapcplAncillaryCodes = this.setDelimeterValue(selectedAutoJcapcplAncillaryCodes);
    this.props.setAuthenticatedUser(auth);
  }
  updateCustCode(selectedCC) {
    if(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' && this.props.auth.userInfo.role === 'Customer') {
      let selectedCustVal = selectedCC;

      if(selectedCC.map((x) => { return x.value; }).includes('All')) {
        selectedCustVal = this.state.custCodeOptions.slice(1); // Array.from(autoAncillaryCodeDropDownSet);
      }

      this.setState({ selectedCustCodeMode: selectedCustVal, selectedCC, selectedCustVal });
    } else {
      const selectedCustVal = selectedCC;
      const user = this.props.auth.userInfo;
      let selectedCustCode = this.setDelimeterValue(selectedCustVal);
      if(selectedCustCode === '' && user.type === 'CUSTOMER_CODE') {
        selectedCustCode = this.props.auth.userInfo.custCodeAccess;
      }
      user.selectedCustCode = selectedCustCode;
      this.setState({ selectedCustCodeMode: selectedCC });
    }
  }
  updateLevel2(selectedLvl2, selectedValue) {
    let selectedLevel2 = selectedLvl2;
    // eslint-disable-next-line no-unused-vars
    const user = this.props.auth.userInfo;
    if(selectedLevel2 === '') {
      selectedLevel2 = this.props.auth.userInfo.level2Access;
    }

    const level2Options = this.state.level2Options.map((item) => {
      if(item.value === selectedValue.value) {
        return {
          ...item,
          checked: !item.checked
        };
      }
      return item;
    });
    // eslint-disable-next-line react/no-unused-state
    this.setState({ selectedLevel2Mode: selectedLevel2, level2Options });
  }

  unsubscribeuser() {
    const postbody = {
      fcmToken: localStorage.getItem('fcmtoken'),
      topic: this.props.auth.userInfo.userid,
    };
    if(postbody.fcmToken === null) {
      return;
    }
    SCVWebAPI.dbPost('/push-notification/unsubscribe', null, null, postbody)
      .then(() => {})
      .catch(() => {});
  }

  logout() {
    this.unsubscribeuser();
    this.props.logout({}); //eslint-disable-line react/prop-types
    this.props.updateNav(0); //eslint-disable-line react/prop-types
    this.props.history.replace({ pathname: '/' }); //eslint-disable-line react/prop-types
    SCVWebAPI.dbGet('/logout', {}, {}, null)
      .then().catch();
  }
  openNotifications() {
    this.setState({ openNotify: true });
    const url = '/user/read-notification/' + this.props.auth.userInfo.userid;
    SCVWebAPI.dbGet(url, {})
      .then(() => {})
      .catch(() => {});
  }
  getNootificationCount(a, b) {
    let count = 0;
    let notificationData = [];
    const url = '/push-notification/user/' + this.props.auth.userInfo.userid;
    SCVWebAPI.dbGet(url, {})
      .then(() => {
        count = response.pendingNotificationCount;
        notificationData = response.pushNotificationList;
        notificationData = this.transformEnquiryDate(notificationData);
        notificationData = this.transformEnquiryTime(notificationData);
        let userNotifications = this.props.auth //eslint-disable-line
        response.pushNotificationList = this.transformEnquiryTime(response.pushNotificationList);
        response.pushNotificationList = this.transformEnquiryDate(response.pushNotificationList);
        userNotifications.userInfo.tabledata = response.pushNotificationList.reverse();
        userNotifications.userInfo.tabledataLength =
          response.pendingNotificationCount;
        this.setState({ count, notificationData }) //eslint-disable-line
        this.props.setAuthenticatedUser({
          userInfo: a,
          token: b,
          isEmerge: false,
          tabledataLength: userNotifications.userInfo.tabledataLength,
          tabledata: userNotifications.userInfo.tabledata,
          userNotifications: userNotifications, //eslint-disable-line
        });
        this.setState({
          // eslint-disable-next-line react/no-unused-state
          data: response.pushNotificationList,
          dataDefault: response.pushNotificationList, //eslint-disable-line
          numberCount: response.pendingNotificationCount, //eslint-disable-line
        });
      })
      .catch(() => {
        count = 0;
        notificationData = [];
        let userNotifications = this.props.auth //eslint-disable-line
        userNotifications.tabledata = response.pendingNotificationCount;
        userNotifications.tabledataLength = response.pushNotificationList;
        this.setState({ count, notificationData }) //eslint-disable-line
        this.props.setAuthenticatedUser({
          userInfo: a,
          token: b,
          isEmerge: false,
          tabledataLength: userNotifications.tabledataLength,
          tabledata: userNotifications.tabledata, //eslint-disable-line
        });
      });
  }
  handleLoading() {
    const intervalId = setInterval(() => {
      this.setState((prevState) => {
        if(this.state.percentage === 85) {
          clearInterval(intervalId);
        }
        return {
          percentage:
            prevState.percentage !== 100
              ? prevState.percentage + 5
              : prevState.percentage,
        };
      });
    }, 200);
  }
  handleFilterClick() {
    const currentState = this.state.isHeaderFilterOpen;
    this.setState({ isHeaderFilterOpen: !currentState });
  }

  handleFilterClick1() {
    this.setState({ isHeaderFilterOpen: !this.state.isHeaderFilterOpen });
    //window.location.reload();
  }
  transformEnquiryDate(table) {
    const tableData = table;
    for (let i = 0; i < tableData.length; i = i + 1) {
      const date = tableData[i].createdAt;
      tableData[i].notificationTime = moment(date).format('HH:mm');
    }
    return tableData;
  }
  transformEnquiryTime(table) {
    const tableData = table;
    for (let i = 0; i < tableData.length; i = i + 1) {
      const date = tableData[i].createdAt;
      tableData[i].notificationDate = moment(date).format('D MMM');
    }
    return tableData;
  }

  applyFilter() {
    if(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' &&
      this.props.auth.userInfo.role === 'Customer' &&
      this.state.selectedCustCodeMode.length === 0 &&
      this.state.selectedAutoAncillaryCodes.length === 0 &&
      this.state.selectedAutoJcapcplAncillaryCodes.length === 0) {
      this.setState({ errorMessage: 'Please select atleast one option to proceed' });
    } else {
      if(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' &&
      this.props.auth.userInfo.role === 'Customer') {
        const user = this.props.auth.userInfo;
        const selectedCustVal = this.setDelimeterValue(this.state.selectedCustVal);
        if(this.state.selectedCC && this.state.selectedCC.length > 0) {
          if(this.state.selectedCustVal && this.state.selectedCustVal.includes('$$')) {
            user.selectedCustCode = this.state.selectedCustVal;
          } else {
            const selectedCustCode = selectedCustVal;
            user.selectedCustCode = selectedCustCode;
          }
        } else { user.selectedCustCode = ''; }
      }
      this.setState({ errorMessage: '' });
      let selectedLevel2Val = '';
      let selectedLevel2 = '';
      // eslint-disable-next-line array-callback-return
      this.state.level2Options.map((item) => {
        if(item.checked) {
          selectedLevel2Val = item.value + '$$';
          selectedLevel2 += selectedLevel2Val;
        }
      });
      selectedLevel2 = selectedLevel2.substring(0, selectedLevel2.length - 2);
      const user = this.props.auth.userInfo;
      user.selectedLevel2 = selectedLevel2;

      const isSM = user === undefined ? false : user.role === 'SM';
      if(isSM) {
        user.headerFilterSelectedSM = 'selected';
      }
      const customer = this.state.customerInfo //eslint-disable-line
      user.custId = customer;
      this.props.setAuthenticatedUser({
        userInfo: user,
        customerInfo: customer,
        token: this.props.auth.token,
        isEmerge: this.props.auth.isEmerge,
        emergeToken: this.props.auth.emergeToken, //eslint-disable-line
      });
      window.location.reload();
    }
  }
  renderCheckboxes() {
    const { level2Options } = this.state;
    // eslint-disable-next-line no-unused-vars
    const checkboxDataUI = level2Options.map((checkbox, index) => {
      return (
        // eslint-disable-next-line react/jsx-key
        <div className="checkbox-view">
          <input
            type="checkbox"
            className="checkboxInput"
            value={checkbox.value}
            checked={checkbox.checked}
            onChange={(e) => {
              this.updateLevel2(e, checkbox);
            }}
            style={{ color: '#5d8f90' }} /><label style={{ display: 'inline' }}><span className='checkboxText'> {checkbox.value}</span></label>&nbsp;&nbsp;</div>//eslint-disable-line

      );
    });

    return (
      level2Options.length > 0 ? (
        <div className="checkbox_subcontainer">
          {checkboxDataUI}
        </div>
      ) : null
    );
  }
  render() {
    const isSM =
      this.props.auth.userInfo === undefined
        ? false
        : this.props.auth.userInfo.role === 'SM'; //eslint-disable-line react/prop-types
    let userGuidePath = process.env.USER_GUIDE_PATH;
    const businessType =
      this.props.auth.userInfo === undefined
        ? false
        : this.props.auth.userInfo.buisnessType; //eslint-disable-line react/prop-types
    if(businessType === 'IsAutomotiveUser') {
      userGuidePath = process.env.USER_GUIDE_PATH_AUTO;
    }
    if(businessType === 'IsIPPFPUser') {
      userGuidePath = process.env.USER_GUIDE_PATH_AUTO;
    }

    return (
      <div className='navigation-logo-header-new'>
        <div className='nav-bar-row'>

          <div className='nav-bar-compass-logo'>
            <div className='compass-logo' onClick={this.selectNavOption}>
              <Link to={this.getHomeRoute(this.props.auth.userInfo)}>
                <img src={logoCompass} alt="Logo" className='img img-responsive' />
              </Link>
            </div>
          </div>

          <div className={this.props.auth.userInfo.buisnessType !== 'IsExportUser' ? 'nav-bar-username' : 'nav-bar-username-border'}>
            <div className='fw-strong'>{this.props.userName}
            </div>
          </div>

          <div className='nav-bar-refresh-ts'>
            {this.props.auth.userInfo.buisnessType !== 'IsExportUser' &&
              <div>
                <span className='navbar-refresh-ts-caption'>Last Data Refresh :</span> <span className='fw-strong'>{this.props.lastRefreshTS} - IST</span>
              </div>
            }
          </div>

          <div className='nav-bar-custname'>
            {this.state.showUserOptions && !this.state.isHeaderFilterOpen && isSM && this.props.auth.userInfo.buisnessType !== 'IsExportUser' && (
              <div className="compass-custname">
                <span>Customer:</span>{' '}
                <span className="fw-strong">
                  {this.props.auth.userInfo.dropdownName}
                </span>
                <br />
                <span className='nav-product'>Products:</span>{' '}
                <span className="fw-strong">{' '}
                  {this.props.auth.userInfo.selectedLevel2
                    ? this.props.auth.userInfo.selectedLevel2.replace(/\$\$/g, ', ')
                    : this.props.auth.userInfo.level2Access.replace(/\$\$/g, ', ')}{' '}
                </span>
              </div>
            )}
          </div>

          <div className='nav-bar-notification hidden-print'>
            {this.state.showUserOptions && this.props.auth.userInfo.buisnessType !== 'IsExportUser' && (
              <div className="navbar-notification-container">
                {this.props.auth.userInfo.role !== 'Internal' && (
                  <div className="navbar-notification-container-inner">
                    {' '}
                    {/* <NavigationLogoHeaderFilter isHeaderFilterOpen={this.state.isHeaderFilterOpen} /> */}
                    {!this.state.isHeaderFilterOpen && this.props.auth.userInfo.role !== 'Internal' && (
                      <div
                        className="navbar-header-filter-container"
                        onClick={() => {
                          this.handleFilterClick();
                        }}
                      >
                        <img
                          className="navbar-header-filter-icon"
                          src={filter}
                          alt="Filter Icon"
                          title='Select to filter Customer Code'
                        />
                        <span>Filter Customer</span>
                      </div>
                    )}
                    {this.state.isHeaderFilterOpen && this.props.auth.userInfo.role !== 'Internal' && (
                      <div
                        className="navbar-header-filter-container"
                        onClick={() => { this.handleFilterClick(); }}
                      >
                        <img
                          className="navbar-header-filter-icon"
                          src={filter}
                          alt=""
                          title='Select to filter Customer Code'
                        />
                        <span>Filter Customer</span>
                      </div>
                    )}
                    {this.props.auth.userInfo.role !== 'SPA' && (
                      <div
                        className='navbar-notification-bell'
                        onClick={() => {
                          this.openNotifications(this.state.poId);
                        }}
                      >
                        <img className="navbar-notification-bell-icon" src={bellNew} alt="Notifications" />
                        <Badge className="navbar-notification-bell-badge">
                          {this.props.auth.userInfo.tabledataLength}
                        </Badge>
                      </div>
                    )}
                  </div>
                )}
                {this.state.isHeaderFilterOpen && (
                <div className="header-filter-container-section">
                  <div>
                    <div
                      className="filter-title-content"
                    >
                      <div className="filter-head">Filter</div>
                      <div className="closefilter" onClick={this.handleFilterClick1}>
                        <img className="close-icon" src={iconClose} alt="close" />
                      </div>
                    </div>
                    <hr className="filter-hr" />
                  </div>
                  {this.state.showSMOptions && (
                  <div className="user-options-container-sm">
                    <Select
                      options={this.getSMIDs()}
                      onChange={this.changeCode}
                      value={this.state.dropDownDefaultValue}
                    />
                    <div className="calloutText">
                      <div className="calloutMessage">
                        {this.state.dropDownDefaultValue.label}
                      </div>
                    </div>
                  </div>
                    )}
                  {this.props.auth.userInfo.role !== 'Internal' && (
                  <div className="user-options-container-level2">
                    <div>
                      {!this.state.custCodeLoading && (
                      <Filter
                        filterOptions={this.state.custCodeOptions}
                        onChange={this.updateCustCode}
                        value={this.state.selectedCustCodeMode}
                        label="TSL_Customer_Code"
                        isHeaderFilterOpen={this.state.isHeaderFilterOpen}
                        placeholder={(this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser' && this.props.auth.userInfo.role === 'Customer') ? 'None' : 'All'}
                      />
                          )}
                      {this.state.custCodeLoading && (
                      <LoadingComponent
                        thin
                        styles={{
                                height: '40px',
                                width: '40px',
                              }}
                        percentage={this.state.percentage}
                      />
                          )}
                    </div>
                    {this.props.auth.userInfo.role === 'Customer' &&
                          (this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser') &&
                          this.props.auth.userInfo.autoAncillaryCode !== null &&
                          <div className='level2title'>
                            {!this.state.autoAncillaryCodeLoading && (
                              <Filter
                                filterOptions={this.state.autoAncillaryCodeArray}
                                onChange={this.updateAutoAncillaryCode}
                                value={this.state.selectedAutoAncillaryCodes}
                                label='TSL_Ancillary_Code'
                                placeholder='None'
                              />
                            )}
                            {this.state.autoAncillaryCodeLoading && (
                              <LoadingComponent
                                thin
                                styles={{
                                  height: '40px',
                                  width: '40px',
                                }}
                                percentage={this.state.percentage}
                              />
                            )}
                          </div>
                        }
                    {this.props.auth.userInfo.role === 'Customer' &&
                          (this.props.auth.userInfo.buisnessType === 'IsAutomotiveUser') &&
                          this.props.auth.userInfo.autoJcapcplAncillaryCode !== null &&
                          <div className='level2title'>
                            {!this.state.autoAncillaryCodeLoading && (
                              <Filter
                                filterOptions={this.state.autoJcapcplAncillaryCodeArray}
                                onChange={this.updateAutoJcapcplAncillaryCode}
                                value={this.state.selectedAutoJcapcplAncillaryCodes}
                                label='JCAPCPL_Customer_Code'
                                placeholder='None'
                                style={{ marginTop: '10px' }}
                              />
                            )}
                            {this.state.autoAncillaryCodeLoading && (
                              <LoadingComponent
                                thin
                                styles={{
                                  height: '40px',
                                  width: '40px',
                                }}
                                percentage={this.state.percentage}
                              />
                            )}
                          </div>
                        }
                    {this.props.auth.userInfo.role === 'Customer' &&
                          (this.props.auth.userInfo.buisnessType === 'IsIPPFPUser') &&
                          this.props.auth.userInfo.ippFpAncillaryCode !== null &&
                          <div className='level2title'>
                            {!this.state.autoAncillaryCodeLoading && (
                              <Filter
                                filterOptions={this.state.autoAncillaryCodeArray}
                                onChange={this.updateAutoAncillaryCode}
                                value={this.state.selectedAutoAncillaryCodes}
                                label='Ancillary Code'
                                placeholder='None'
                              />
                            )}
                            {this.state.autoAncillaryCodeLoading && (
                              <LoadingComponent
                                thin
                                styles={{
                                  height: '40px',
                                  width: '40px',
                                }}
                                percentage={this.state.percentage}
                              />
                            )}
                          </div>
                        }
                    <p className='level2title'> Level 2</p>
                    {this.renderCheckboxes()}
                    <p className='level2title' style={{ color: 'red' }}> {this.state.errorMessage}</p>
                    <div className="bottomBarnew">
                      {/* <div onClick={() => {
                            this.handleFilterClick1();
                        }}
                        > */}
                      <button className="clear-button1" onClick={() => { this.handleFilterClick1(); }}>Close</button>
                      {/* </div> */}
                      {/* <div onClick={() => {
                            this.applyFilter();
                        }}
                        > */}
                      <button className="Apply-button1" onClick={() => { this.applyFilter(); }}>Apply</button>
                      {/* </div> */}
                    </div>
                  </div>
                    )}
                </div>
                )}
              </div>
            )}
          </div>

          <div className='nav-bar-user-login hidden-print'>
            <div
              className="navbar-user-name-header"
              onClick={() => {
                this.setState({
                  showUserDropDown: !this.state.showUserDropDown,
                });
              }}
            >
              <img className="navbar-profile-icon" src={profile} alt="profile" />
              <img
                className="navbar-profile-dropdown"
                src={this.state.showUserDropDown ? userRightUp : userRightDown}
                alt=""
              />
            </div>
            {this.state.showUserDropDown && (
              <div className="user-dropdown-options">
                <div className="user-guide-option1">
                  <div>
                    <a href={userGuidePath} download target="_blank">
                      User Guide
                    </a>
                  </div>
                </div>
                <div className="option-icon-container1">
                  {this.state.userOptions.map((userOption, idx) => {
                    return (
                      <a
                        href={this.state.userEmail}
                        key={'useroption-' + (idx + 1)}
                      >
                        <div className="contact-us1">{userOption.text}</div>
                      </a>
                    );
                  })}
                </div>
                {!this.props.auth.isEmerge && (
                  <div className="user-logout-option1">
                    <div
                      onClick={() => {
                        this.logout();
                      }}
                    >
                      <Link to="/">Logout</Link>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>

          <div className='nav-bar-tatasteel-logo'>
            <img className="logo img img-responsive" src={logoIconLeft} alt="Logo" />
          </div>
        </div>

        {this.state.openNotify && (
          <div>
            <NotificationsViewPopUp
              po={this.state.tableData}
              getTemplate={this.getTemplate}
              closeActivePO={this.closeActivePO}
              closed={this.closed}
              getPODetails={this.getPODetails}
              goBack={this.goBack}
              closePopup={() => {
                this.handleEventChangeotification('openNotify', false);
              }}
            />
          </div>
        )}
      </div>
    );
  }
}

NavigationLogoHeader.propTypes = {
  showUserOptions: PropTypes.bool,
  updateAppContent: PropTypes.func.isRequired,
  setAuthenticatedUser: PropTypes.func.isRequired,
  auth: PropTypes.shape().isRequired,
};

NavigationLogoHeader.defaultProps = {
  //navLogoStyles: {},
  showUserOptions: true,
};

function mapStateToProps(state) {
  return {
    auth: state.auth,
    nav: state.nav,
  };
}

function mapDispatchToProps(dispatch) {
  return bindActionCreators(ActionCreators, dispatch);
}

export default withRouter(connect(mapStateToProps, mapDispatchToProps)(NavigationLogoHeader));