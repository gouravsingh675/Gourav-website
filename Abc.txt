import React, { useEffect, useState, useMemo } from 'react';
import { useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';
import { CircularProgress } from '@heroui/react';
import SCVWebAPI from '../../../framework/api';

const AccountTable = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await SCVWebAPI.post(
        '/CompassAccountSummary/GetInvoiceSummary',
        {},
        {},
        {
          SoldToParty: '0000102461',
          ancilCustId: '',
        }
      );

      const transformed = response.map((item) => ({
        rowHeader: item.RowHeader || '',
        soldToParty: item.SoldToParty || '',
        outstanding: parseFloat(item.InvoiceTotal || 0).toFixed(4),
        overdue: parseFloat(item.OverdueAmountTotal || 0).toFixed(4),
      }));

      setData(transformed);
    } catch (err) {
      alert('Error fetching accounts data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const columns = useMemo(
    () => [
      {
        header: ' ',
        accessorKey: 'rowHeader',
      },
      {
        header: 'SOLD TO PARTY',
        accessorKey: 'soldToParty',
      },
      {
        header: 'OUTSTANDING (AMOUNT IN LACS)',
        accessorKey: 'outstanding',
      },
      {
        header: 'OVERDUE (AMOUNT IN LACS)',
        accessorKey: 'overdue',
      },
    ],
    []
  );

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div className="p-4">
      {/* Top header */}
      <div className="flex justify-between items-center mb-4">
        <button className="text-sm text-blue-600 underline">&lt; Back</button>
        <h1 className="text-2xl font-bold text-center flex-1">Accounts</h1>
        <button className="text-sm px-4 py-1 border border-gray-300 rounded">Export</button>
      </div>

      {/* Loader */}
      {loading ? (
        <div className="flex justify-center items-center h-40">
          <CircularProgress
            classNames={{
              svg: 'w-36 h-36 stroke-blue-700',
              indicator: 'stroke-blue-700',
              track: 'stroke-blue-700/5',
              value: 'text-3xl font-semibold text-blue-700',
            }}
            aria-label="Loading..."
            showValueLabel={true}
            value={100}
          />
        </div>
      ) : (
        <div className="overflow-x-auto border rounded">
          <table className="min-w-full text-sm text-left">
            <thead className="bg-blue-900 text-white">
              {table.getHeaderGroups().map(headerGroup => (
                <tr key={headerGroup.id}>
                  {headerGroup.headers.map(header => (
                    <th key={header.id} className="px-4 py-2 font-medium">
                      {flexRender(header.column.columnDef.header, header.getContext())}
                    </th>
                  ))}
                </tr>
              ))}
            </thead>
            <tbody className="divide-y">
              {table.getRowModel().rows.map(row => (
                <tr key={row.id}>
                  {row.getVisibleCells().map(cell => (
                    <td key={cell.id} className="px-4 py-2">
                      {flexRender(cell.column.columnDef.cell, cell.getContext())}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Pagination Stub */}
      <div className="flex justify-between items-center mt-4 text-sm">
        <div>
          Rows per page:
          <select className="ml-2 border rounded px-2 py-1">
            <option>10</option>
            <option>20</option>
            <option>30</option>
          </select>
        </div>
        <div className="flex items-center gap-4">
          <span>1â€“5 of {data.length}</span>
          <button className="text-lg">{'<'}</button>
          <button className="text-lg">{'>'}</button>
        </div>
      </div>
    </div>
  );
};

export default AccountTable;
