// SidebarNavigation.js
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { allModules } from '../../utils/module-route';
import './SidebarNavigation.scss';

const SidebarNavigation = ({ userModules }) => {
  const [collapsedSections, setCollapsedSections] = useState({});

  const toggleSection = (code) => {
    setCollapsedSections(prevState => ({
      ...prevState,
      [code]: !prevState[code]
    }));
  };

  // Filter accessible modules
  const modulesToShow = allModules.filter(
    mod =>
      userModules.includes(mod.code) ||
      (mod.menuItems && mod.menuItems.some(item => userModules.includes(item.code)))
  );

  return (
    <div className="sidebar">
      {modulesToShow.map(mod => {
        const menuItemsToShow = mod.menuItems
          ? mod.menuItems.filter(item => userModules.includes(item.code))
          : [];

        const isCollapsed = collapsedSections[mod.code] === true;

        return (
          <div key={mod.code} className="sidebar-section">
            <div
              className="sidebar-main"
              onClick={() => toggleSection(mod.code)}
              style={{ cursor: 'pointer' }}
            >
              {mod.route && userModules.includes(mod.code) ? (
                <NavLink to={mod.route} className="sidebar-link">
                  <img src={mod.icon} alt={mod.label} className="sidebar-icon" />
                  <span>{mod.label}</span>
                </NavLink>
              ) : (
                <div className="sidebar-label">
                  <img src={mod.icon} alt={mod.label} className="sidebar-icon" />
                  <span>{mod.label}</span>
                </div>
              )}
              {menuItemsToShow.length > 0 && (
                <span className={`arrow ${isCollapsed ? 'rotate' : ''}`}>&#9660;</span>
              )}
            </div>
            {/* Nested items */}
            {menuItemsToShow.length > 0 && !isCollapsed && (
              <div className="sidebar-submenu">
                {menuItemsToShow.map(item => (
                  <NavLink key={item.route} to={item.route} className="sidebar-sublink">
                    {item.label}
                  </NavLink>
                ))}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
};

export default SidebarNavigation;


scss
// SidebarNavigation.scss
.sidebar {
  width: 250px;
  background-color: #f4f4f4;
  padding: 1rem;
  height: 100vh;
  overflow-y: auto;
}

.sidebar-section {
  margin-bottom: 1rem;
}

.sidebar-main {
  display: flex;
  align-items: center;
  justify-content: space-between; /* Added to push arrow to the right */
  gap: 10px;
  font-weight: bold;
  color: #333;
  padding-right: 10px; /* Added to give some space for the arrow */
}

.sidebar-link,
.sidebar-label {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 6px 10px;
  color: inherit;
  text-decoration: none;
  border-radius: 5px;
  width: 100%; /* Make sure the link/label takes full width */

  &:hover {
    background-color: #e0e0e0;
  }
}

.sidebar-icon {
  width: 24px;
  height: 24px;
}

.sidebar-submenu {
  margin-left: 30px;
  margin-top: 5px;
}

.sidebar-sublink {
  display: block;
  padding: 4px 0;
  color: #555;
  text-decoration: none;

  &:hover {
    text-decoration: underline;
  }
}

.arrow {
  transition: transform 0.2s ease-in-out;
}

.arrow.rotate {
  transform: rotate(-90deg);
}
